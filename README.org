* LISP Build System

A lil LISPy build system.

#+begin_src lisp :tangle .lbs
;; Yeah, this is a lisp-build-system build file for lisp-build-system
;; itself... bootstrappy!

(library libparser)
(include-directories libparser inc)
(sources libparser lib/parser/parser.cpp)
(flags libparser -Wall -Wextra -Wpedantic -Werror)

(library libtests)
(include-directories libtests inc)
(sources libtests lib/tests/tests.cpp)
(flags libparser -Wall -Wextra -Wpedantic -Werror)
(dependency libtests libparser)

(executable lbs)
(include-directories lbs inc)
(sources lbs src/main.cpp)
(flags lbs -Wall -Wextra -Wpedantic -Werror)
(dependency lbs libparser)
(dependency lbs libtests)
;; (defines lbs -DLBS_TEST)
#+end_src lisp

To use the build system, first of all build it. This can be done by bootstrapping with a pre-built binary or by using CMake. Either way, once you have an =lbs= binary available, just run it from this directory (or any directory with a =.lbs= build scenario description file). Most commonly this is something like =./bld/lbs=.

What you'll see is a command (or commands) that should look familiar to you if you've compiled a C or C++ project before.

Iff the commands look like something you are okay with running on your system, you can use =eval `./bld/lbs`= to run it (or them). Note the backticks which utilize a sub-shell to replace the first argument with the output of running =lbs=, therefore running that command you saw previously.

On Windows, you /currently/ have to redirect to a batch file and then call that batch file. i.e. =bld\lbs.exe > build.bat= followed by =build.bat=.

In the future, we will provide a command line flag to make =lbs= run the commands itself; or maybe that will be the default and there will be a flag to do a "dry run".
