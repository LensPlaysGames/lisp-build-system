* LISP Build System

A lil LISPy build system.

#+begin_src lisp :tangle .lbs
(library
 libparser
 (include-directories inc)
 (sources lib/parser/parser.cpp)
 (flags -Wall -Wextra -Wpedantic -Werror))

(library
 libtests
 (include-directories inc)
 (sources lib/tests/tests.cpp)
 (flags -Wall -Wextra -Wpedantic -Werror))
(dependency libtests libparser)

(executable
 lbs
 (include-directories inc)
 (sources src/main.cpp)
 ;; (defines -DLBS_TEST)
 (flags -Wall -Wextra -Wpedantic -Werror))

(dependency lbs libparser)
(dependency lbs libtests)
#+end_src lisp

To use the build system, first of all build it. This can be done by bootstrapping with a pre-built binary or by using CMake. Either way, once you have an =lbs= binary available, just run it (with the =-n= argument signifying a dry run) from this directory (or any directory with a =.lbs= build scenario description file). Most commonly this looks something like =./bld/lbs -n=.

What you'll see is a command or commands that should look familiar to you if you've compiled a C or C++ project before, along with a few self-explanatory actions like file copies, deletions, etc.

Iff the commands look like something you are okay with running on your system, you can use =./bld/lbs= to run them. If you are in this directory, you will end up with an executable at =./lbs=.

The CLI also offers a best-effort attempt to convert the LISP build system description into a usable =CMakeLists.txt=: just pass =--cmake= and it will print it out instead of doing any building itself.
